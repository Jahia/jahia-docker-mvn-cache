name: On Code Change

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"
  push:

env:
  DEFAULT_VERSION: 17-jdk-noble

jobs:
  # Builds a base image containing the maven cache
  build-base:
    name: Build and push Base docker image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Login to GitHub registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: |
            ${{ secrets.BASTION_SSH_PRIVATE_KEY_JAHIACI }}
            ${{ secrets.GH_SSH_PRIVATE_KEY_JAHIACI }}

      # If the workflow is executed outside of main (the default branch)
      # Then a suffix corresponding to the branch name is added to the image (or the PR number if it's a PR)
      - name: Define image suffix
        shell: bash
        run: |
          if [[ "${{ github.ref_name }}" != "${{ github.event.repository.default_branch }}" ]]; then
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "IMAGE_SUFFIX=-pr-${{ github.event.pull_request.number }}" >> $GITHUB_ENV
            else
              # For push events, try to find associated PR
              PR_NUMBER=$(gh pr list --head "${{ github.ref_name }}" --state open --json number --jq '.[0].number // empty' 2>/dev/null || echo "")
              if [[ -n "$PR_NUMBER" ]]; then
                echo "IMAGE_SUFFIX=-pr-$PR_NUMBER" >> $GITHUB_ENV
              else
                # Sanitize branch name for Docker tag (replace invalid characters)
                BRANCH_NAME="${{ github.ref_name }}"
                SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g')
                echo "IMAGE_SUFFIX=-$SANITIZED_BRANCH" >> $GITHUB_ENV
              fi
            fi
          else
            echo "IMAGE_SUFFIX=" >> $GITHUB_ENV
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Base image
        uses: docker/build-push-action@v6
        with:
          ssh: default
          push: true
          file: ./Dockerfile
          tags: ghcr.io/jahia/jahia-docker-mvn-cache:${{ env.DEFAULT_VERSION }}-node-base${{ env.IMAGE_SUFFIX }}
          cache-from: type=gha,scope=base-${{ env.DEFAULT_VERSION }}{{ env.IMAGE_SUFFIX }}
          cache-to: type=gha,mode=max,scope=base-${{ env.DEFAULT_VERSION }}{{ env.IMAGE_SUFFIX }}
          build-args: |
            BASE_TAG=${{ env.DEFAULT_VERSION }}

      # Get the commit hash of the jahia-private repo, used in the cache key (to invalidate the cache when the repo changes)
      - name: Get jahia-private repo commit hash
        id: jahia-private-repo-hash
        run: |
          COMMIT_HASH=$(git ls-remote git@github.com:Jahia/jahia-private.git HEAD | cut -f1)
          echo "hash=$COMMIT_HASH" >> $GITHUB_OUTPUT

      - name: Build and push Loaded image
        uses: docker/build-push-action@v6
        with:
          ssh: default
          push: true
          file: ./Dockerfile-mvn
          tags: ghcr.io/jahia/jahia-docker-mvn-cache:${{ env.DEFAULT_VERSION }}-mvn-loaded${{ env.IMAGE_SUFFIX }}
          cache-from: type=gha,scope=mvn-${{ env.DEFAULT_VERSION }}-hash-${{ steps.jahia-private-repo-hash.outputs.hash }}{{ env.IMAGE_SUFFIX }}
          cache-to: type=gha,mode=max,scope=mvn-${{ env.DEFAULT_VERSION }}-hash-${{ steps.jahia-private-repo-hash.outputs.hash }}{{ env.IMAGE_SUFFIX }}
          build-args: |
            SRC_IMAGE=ghcr.io/jahia/jahia-docker-mvn-cache:${{ env.DEFAULT_VERSION }}-node-base${{ env.IMAGE_SUFFIX }}

  build-additional:
    name: Build and push Additional docker images
    needs: build-base
    runs-on: ubuntu-latest
    strategy:
      matrix:
        jdk_version:
          - "8-jdk-noble"
          - "11-jdk-noble"
    steps:
      - uses: actions/checkout@v5
      - name: Login to GitHub registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: |
            ${{ secrets.BASTION_SSH_PRIVATE_KEY_JAHIACI }}
            ${{ secrets.GH_SSH_PRIVATE_KEY_JAHIACI }}

      # If the workflow is executed outside of main (the default branch)
      # Then a suffix corresponding to the branch name is added to the image (or the PR number if it's a PR)
      - name: Define image suffix
        shell: bash
        run: |
          if [[ "${{ github.ref_name }}" != "${{ github.event.repository.default_branch }}" ]]; then
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "IMAGE_SUFFIX=-pr-${{ github.event.pull_request.number }}" >> $GITHUB_ENV
            else
              # For push events, try to find associated PR
              PR_NUMBER=$(gh pr list --head "${{ github.ref_name }}" --state open --json number --jq '.[0].number // empty' 2>/dev/null || echo "")
              if [[ -n "$PR_NUMBER" ]]; then
                echo "IMAGE_SUFFIX=-pr-$PR_NUMBER" >> $GITHUB_ENV
              else
                # Sanitize branch name for Docker tag (replace invalid characters)
                BRANCH_NAME="${{ github.ref_name }}"
                SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g')
                echo "IMAGE_SUFFIX=-$SANITIZED_BRANCH" >> $GITHUB_ENV
              fi
            fi
          else
            echo "IMAGE_SUFFIX=" >> $GITHUB_ENV
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Base image
        uses: docker/build-push-action@v6
        with:
          ssh: default
          push: true
          file: ./Dockerfile
          tags: ghcr.io/jahia/jahia-docker-mvn-cache:${{ matrix.jdk_version }}-node-base${{ env.IMAGE_SUFFIX }}
          cache-from: type=gha,scope=base-${{ matrix.jdk_version }}{{ env.IMAGE_SUFFIX }}
          cache-to: type=gha,mode=max,scope=base-${{ matrix.jdk_version }}{{ env.IMAGE_SUFFIX }}
          build-args: |
            BASE_TAG=${{ matrix.jdk_version }}

      - name: Build and push Loaded image USING CACHE
        uses: docker/build-push-action@v6
        with:
          ssh: default
          push: true
          file: ./Dockerfile-fromcache
          tags: ghcr.io/jahia/jahia-docker-mvn-cache:${{ matrix.jdk_version }}-mvn-loaded${{ env.IMAGE_SUFFIX }}
          cache-from: type=gha,scope=fromcache-${{ matrix.jdk_version }}{{ env.IMAGE_SUFFIX }}
          cache-to: type=gha,mode=max,scope=fromcache-${{ matrix.jdk_version }}{{ env.IMAGE_SUFFIX }}
          build-args: |
            SRC_IMAGE=ghcr.io/jahia/jahia-docker-mvn-cache:${{ matrix.jdk_version }}-node-base${{ env.IMAGE_SUFFIX }}       
            CACHE_IMAGE=ghcr.io/jahia/jahia-docker-mvn-cache:${{ env.DEFAULT_VERSION }}-mvn-loaded${{ env.IMAGE_SUFFIX }}

  # Note: It is currently not possible to pass an env variable to the container parameter
  # The tests are therefore disabled except if they are executed from main.
  test-loaded-containers:
    name: Test loaded containers
    needs: build-additional
    runs-on: ubuntu-latest
    if: github.ref_name == github.event.repository.default_branch
    strategy:
      matrix:
        container_version:
          - "8-jdk-noble-mvn-loaded"
          - "11-jdk-noble-mvn-loaded"
          - "17-jdk-noble-mvn-loaded"
    container:
      image: ghcr.io/jahia/jahia-docker-mvn-cache:${{ matrix.container_version }}
      credentials:
        username: ${{ secrets.GH_PACKAGES_USERNAME }}
        password: ${{ secrets.GH_PACKAGES_TOKEN }}
    steps:
      - name: Test Java version matches container_version
        shell: bash
        run: |
          CONTAINER_VERSION="${{ matrix.container_version }}"
          EXPECTED_VERSION="${CONTAINER_VERSION%%-*}"
          echo "Expected JDK major version: $EXPECTED_VERSION"

          # Use java -version for widest compatibility (Java 8+)
          JAVA_VERSION_OUTPUT="$(java -version 2>&1 || true)"
          echo "Java version output:"
          echo "$JAVA_VERSION_OUTPUT"

          # For Java 8, version string is on the first line, like: 'java version "1.8.0_382"'
          # For Java 9+, version string is on the first line, like: 'openjdk version "11.0.19" 2023-04-18'
          # Extract the major version:
          # - For Java 8: parse 1.8 as 8
          # - For Java 9+: parse 9, 11, 17, etc.
          JAVA_MAJOR_VERSION="$(echo "$JAVA_VERSION_OUTPUT" | grep -oE '"[0-9]+\.[0-9]+|\"[0-9]+' | head -n1 | grep -oE '[0-9]+' | while read v; do [ "$v" -eq 1 ] && echo 8 || echo $v; done | head -n1)"
          echo "Detected JDK major version: $JAVA_MAJOR_VERSION"

          if [ "$JAVA_MAJOR_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "❌ Java major version ($JAVA_MAJOR_VERSION) does not match expected version ($EXPECTED_VERSION) for container $CONTAINER_VERSION."
            exit 1
          else
            echo "✅ Java major version ($JAVA_MAJOR_VERSION) matches expected version ($EXPECTED_VERSION) for container $CONTAINER_VERSION."
          fi

      - name: Show disk usage in container
        shell: bash
        run: |
          echo "Disk usage in container:"
          df -h /
