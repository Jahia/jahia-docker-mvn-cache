name: On Code Change

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"
  push:

env:
  DEFAULT_VERSION: 17-jdk-noble

jobs:
  # Builds a base image containing the maven cache
  build-base:
    name: Buid and push Base docker image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Login to GitHub registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: |
            ${{ secrets.BASTION_SSH_PRIVATE_KEY_JAHIACI }}
            ${{ secrets.GH_SSH_PRIVATE_KEY_JAHIACI }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Base image
        uses: docker/build-push-action@v6
        with:
          ssh: default
          push: true
          file: ./Dockerfile
          tags: ghcr.io/jahia/jahia-docker-mvn-cache:${{ env.DEFAULT_VERSION }}-node-base
          build-args: |
            BASE_TAG=${{ env.DEFAULT_VERSION }}

      - name: Build and push Loaded image
        uses: docker/build-push-action@v6
        with:
          ssh: default
          push: true
          file: ./Dockerfile-mvn
          tags: ghcr.io/jahia/jahia-docker-mvn-cache:${{ env.DEFAULT_VERSION }}-mvn-loaded
          build-args: |
            SRC_IMAGE=ghcr.io/jahia/jahia-docker-mvn-cache:${{ env.DEFAULT_VERSION }}-node-base

  build-additional:
    name: Build and push Additional docker images
    needs: build-base
    runs-on: ubuntu-latest
    strategy:
      matrix:
        jdk_version:
          - "8-jdk-noble"
          - "11-jdk-noble"
    steps:
      - uses: actions/checkout@v5
      - name: Login to GitHub registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: |
            ${{ secrets.BASTION_SSH_PRIVATE_KEY_JAHIACI }}
            ${{ secrets.GH_SSH_PRIVATE_KEY_JAHIACI }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Base image
        uses: docker/build-push-action@v6
        with:
          ssh: default
          push: true
          file: ./Dockerfile
          tags: ghcr.io/jahia/jahia-docker-mvn-cache:${{ matrix.jdk_version }}-node-base
          build-args: |
            BASE_TAG=${{ matrix.jdk_version }}

      - name: Build and push Loaded image USING CACHE
        uses: docker/build-push-action@v6
        with:
          ssh: default
          push: true
          file: ./Dockerfile-fromcache
          tags: ghcr.io/jahia/jahia-docker-mvn-cache:${{ matrix.jdk_version }}-mvn-loaded
          build-args: |
            SRC_IMAGE=ghcr.io/jahia/jahia-docker-mvn-cache:${{ matrix.jdk_version }}-node-base          
            CACHE_IMAGE=ghcr.io/jahia/jahia-docker-mvn-cache:${{ env.DEFAULT_VERSION }}-mvn-loaded

  test-base-containers:
    name: Test base containers
    needs: build-additional
    runs-on: ubuntu-latest
    strategy:
      matrix:
        container_version:
          - "8-jdk-noble-node-base"
          - "11-jdk-noble-node-base"
          - "17-jdk-noble-node-base"
    container:
      image: ghcr.io/jahia/jahia-docker-mvn-cache:${{ matrix.container_version }}
      credentials:
        username: ${{ secrets.GH_PACKAGES_USERNAME }}
        password: ${{ secrets.GH_PACKAGES_TOKEN }}
    steps:
      - name: Test Java version matches container_version
        shell: bash
        run: |
          # Get container_version from matrix
          CONTAINER_VERSION="${{ matrix.container_version }}"
          # Extract expected JDK major version from matrix string (e.g. 11 from 11-jdk-noble-node-base)
          EXPECTED_VERSION="${CONTAINER_VERSION%%-*}"
          echo "Expected JDK major version: $EXPECTED_VERSION"

          # Get Java version output
          JAVA_VERSION_OUTPUT="$(java --version 2>&1 || true)"
          echo "Java version output:"
          echo "$JAVA_VERSION_OUTPUT"

          # Extract the first number from the first line (e.g. 17 from 'openjdk 17.0.16 ...')
          JAVA_MAJOR_VERSION="$(echo "$JAVA_VERSION_OUTPUT" | head -n 1 | grep -o -E '[0-9]+' | head -n 1)"
          echo "Detected JDK major version: $JAVA_MAJOR_VERSION"

          # Test and fail if not matching
          if [ "$JAVA_MAJOR_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "❌ Java major version ($JAVA_MAJOR_VERSION) does not match expected version ($EXPECTED_VERSION) for container $CONTAINER_VERSION."
            exit 1
          else
            echo "✅ Java major version ($JAVA_MAJOR_VERSION) matches expected version ($EXPECTED_VERSION) for container $CONTAINER_VERSION."
          fi

      - name: Show disk usage in container
        shell: bash
        run: |
          echo "Disk usage in container:"
          df -h /
     
  test-loaded-containers:
    name: Test loaded containers
    needs: build-additional
    runs-on: ubuntu-latest
    strategy:
      matrix:
        container_version:
          - "8-jdk-noble-mvn-loaded"
          - "11-jdk-noble-mvn-loaded"
          - "17-jdk-noble-mvn-loaded"
    container:
      image: ghcr.io/jahia/jahia-docker-mvn-cache:${{ matrix.container_version }}
      credentials:
        username: ${{ secrets.GH_PACKAGES_USERNAME }}
        password: ${{ secrets.GH_PACKAGES_TOKEN }}
    steps:
      - name: Test Java version matches container_version
        shell: bash
        run: |
          # Get container_version from matrix
          CONTAINER_VERSION="${{ matrix.container_version }}"
          # Extract expected JDK major version from matrix string (e.g. 11 from 11-jdk-noble-node-base)
          EXPECTED_VERSION="${CONTAINER_VERSION%%-*}"
          echo "Expected JDK major version: $EXPECTED_VERSION"

          # Get Java version output
          JAVA_VERSION_OUTPUT="$(java --version 2>&1 || true)"
          echo "Java version output:"
          echo "$JAVA_VERSION_OUTPUT"

          # Extract the first number from the first line (e.g. 17 from 'openjdk 17.0.16 ...')
          JAVA_MAJOR_VERSION="$(echo "$JAVA_VERSION_OUTPUT" | head -n 1 | grep -o -E '[0-9]+' | head -n 1)"
          echo "Detected JDK major version: $JAVA_MAJOR_VERSION"

          # Test and fail if not matching
          if [ "$JAVA_MAJOR_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "❌ Java major version ($JAVA_MAJOR_VERSION) does not match expected version ($EXPECTED_VERSION) for container $CONTAINER_VERSION."
            exit 1
          else
            echo "✅ Java major version ($JAVA_MAJOR_VERSION) matches expected version ($EXPECTED_VERSION) for container $CONTAINER_VERSION."
          fi

      - name: Show disk usage in container
        shell: bash
        run: |
          echo "Disk usage in container:"
          df -h /
     